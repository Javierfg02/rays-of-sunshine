class FBOManager {
private:
    // Main scene rendering
    GLuint m_defaultFBO;
    GLuint m_sceneColorBuffer;
    GLuint m_sceneDepthBuffer;
    
    // Depth of Field buffers
    GLuint m_dofFBO;           // For initial DoF calculations
    GLuint m_blurFBO[2];       // For ping-pong blurring
    GLuint m_dofColorBuffers[2]; // Near and far field blur
    
    // Crepuscular rays buffers
    GLuint m_occlusionFBO;     // For light occlusion
    GLuint m_raysFBO;          // For ray rendering
    
    int m_width, m_height;
    float m_devicePixelRatio;

public:
    void initialize(int width, int height, float devicePixelRatio) {
        m_width = width;
        m_height = height;
        m_devicePixelRatio = devicePixelRatio;
        
        // Create all FBOs and their attachments
        initializeSceneFBO();
        initializeDepthOfFieldFBOs();
        initializeCrepuscularRaysFBOs();
    }

private:
    void initializeSceneFBO() {
        // Main scene FBO (already provided by Qt)
        m_defaultFBO = 2; // Qt's default FBO is typically 2
        
        // Create additional color attachment for the scene
        glGenTextures(1, &m_sceneColorBuffer);
        glBindTexture(GL_TEXTURE_2D, m_sceneColorBuffer);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, m_width * m_devicePixelRatio, 
                    m_height * m_devicePixelRatio, 0, GL_RGBA, GL_UNSIGNED_BYTE, nullptr);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        
        // Create depth attachment
        glGenRenderbuffers(1, &m_sceneDepthBuffer);
        glBindRenderbuffer(GL_RENDERBUFFER, m_sceneDepthBuffer);
        glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT24, 
                            m_width * m_devicePixelRatio, m_height * m_devicePixelRatio);
    }

    void initializeDepthOfFieldFBOs() {
        // DoF calculation FBO
        glGenFramebuffers(1, &m_dofFBO);
        glBindFramebuffer(GL_FRAMEBUFFER, m_dofFBO);
        
        // Create two color attachments for near and far field
        glGenTextures(2, m_dofColorBuffers);
        for (int i = 0; i < 2; i++) {
            glBindTexture(GL_TEXTURE_2D, m_dofColorBuffers[i]);
            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA16F, m_width * m_devicePixelRatio, 
                        m_height * m_devicePixelRatio, 0, GL_RGBA, GL_FLOAT, nullptr);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
            glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0 + i, 
                                 GL_TEXTURE_2D, m_dofColorBuffers[i], 0);
        }
        
        // Create blur FBOs for ping-pong blurring
        glGenFramebuffers(2, m_blurFBO);
        for (int i = 0; i < 2; i++) {
            glBindFramebuffer(GL_FRAMEBUFFER, m_blurFBO[i]);
            glGenTextures(1, &m_blurColorBuffers[i]);
            glBindTexture(GL_TEXTURE_2D, m_blurColorBuffers[i]);
            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA16F, m_width * m_devicePixelRatio, 
                        m_height * m_devicePixelRatio, 0, GL_RGBA, GL_FLOAT, nullptr);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
            glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, 
                                 GL_TEXTURE_2D, m_blurColorBuffers[i], 0);
        }
    }

    void initializeCrepuscularRaysFBOs() {
        // Occlusion map FBO
        glGenFramebuffers(1, &m_occlusionFBO);
        glBindFramebuffer(GL_FRAMEBUFFER, m_occlusionFBO);
        
        // Create occlusion texture
        glGenTextures(1, &m_occlusionTexture);
        glBindTexture(GL_TEXTURE_2D, m_occlusionTexture);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_R8, m_width * m_devicePixelRatio, 
                    m_height * m_devicePixelRatio, 0, GL_RED, GL_UNSIGNED_BYTE, nullptr);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, 
                             GL_TEXTURE_2D, m_occlusionTexture, 0);
        
        // Ray rendering FBO
        glGenFramebuffers(1, &m_raysFBO);
        glBindFramebuffer(GL_FRAMEBUFFER, m_raysFBO);
        
        // Create rays texture
        glGenTextures(1, &m_raysTexture);
        glBindTexture(GL_TEXTURE_2D, m_raysTexture);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA16F, m_width * m_devicePixelRatio, 
                    m_height * m_devicePixelRatio, 0, GL_RGBA, GL_FLOAT, nullptr);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, 
                             GL_TEXTURE_2D, m_raysTexture, 0);
    }
};
